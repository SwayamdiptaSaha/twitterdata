# -*- coding: utf-8 -*-
"""TwitterDemonetization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kuHySq7_M2cuJonOjaAoUMcey0GRDnlR
"""

import nltk
nltk.download('vader_lexicon')
from nltk.sentiment import vader
from nltk.sentiment.util import *
from nltk import tokenize
import numpy as np
nltk.download('stopwords')
import pandas as pd
import re
from nltk.corpus import stopwords
import matplotlib.pyplot as plt
import numpy as np
from bokeh.plotting import figure, show, output_file
from bokeh.io import show, output_file
from bokeh.models import ColumnDataSource
from bokeh.palettes import Spectral6
from bokeh.plotting import figure

tweets=pd.read_csv('/content/demonetization-tweets.csv',encoding='ISO-8859-1')
tweets.head(10)
df=pd.DataFrame(tweets)

def cleantext(text):
  text=re.sub(r"@[A-Za-z0-9]","",text)
  text=re.sub(r"00A0"," ",text)
  text=re.sub(r"00BD"," ",text)
  text=re.sub(r"00B8"," ",text)
  text=re.sub(r"ed"," ",text)
  text=re.sub(r"#","",text)
  text=re.sub(r'RT[\s]+',"",text)
  text=re.sub(r"https?:\/\/\S+"," ",text)
  return text

df['text']=df['text'].apply(cleantext)

def subject(text):
  return TextBlob(text).sentiment.subjectivity

def polarity(text):
  return TextBlob(text).sentiment.polarity

df['subjectivity']=df['text'].apply(subject)
df['polarity']=df['text'].apply(polarity)

allwords=' '.join([twts for twts in df['text']])
wordcloud=WordCloud(width=800,height=500,random_state=21,max_font_size=200).generate(allwords)
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.show()

def getanalysis(score):
  if score<0:
    return 'Negative'
  elif score==0:
    return 'Neutral'
  else:
    return 'Positive'

df['Analysis']=df['polarity'].apply(getanalysis)   
df.head(30)

j=1
sortedPF=df.sort_values(by=['polarity'])
for i in range(0,sortedPF.shape[0]):
  if(sortedPF['Analysis'][i]=='Positive'):
    print(str(j)+')'+sortedPF['text'][i]+'\n')
    j=j+1

j=1
sortedNF= df.sort_values(by=['polarity'],ascending='False')
for i in range(0,sortedNF.shape[0]):
  if (sortedNF['Analysis'][i]=='Negative'):
    print(str(j)+')'+sortedNF['text'][i]+'\n')
    j=j+1

plt.figure(figsize=(8,6))
for i in range(0, df.shape[0]):
 plt.scatter(df["polarity"][i], df["subjectivity"][i], color='Blue')
 
plt.title('Sentiment Analysis')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

ptweets = df[df.Analysis == 'Positive']
ptweets = ptweets['text']

round( (ptweets.shape[0] / df.shape[0]) * 100 , 1)


ntweets = df[df.Analysis == 'Negative']
ntweets = ntweets['text']
round( (ntweets.shape[0] / df.shape[0]) * 100, 1)

neutweets=df[df.Analysis=='Neutral']
neutweets=neutweets['text']

df['Analysis'].value_counts()

plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['Analysis'].value_counts().plot(kind = 'bar')
plt.show()
